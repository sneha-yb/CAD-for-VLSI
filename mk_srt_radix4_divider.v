//
// Generated by Bluespec Compiler, version 2023.01-39-g42fb7b6c (build 42fb7b6c)
//
// On Sun Dec 10 09:57:28 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_start                   O     1 const
// mav_result                     O    65
// RDY_mav_result                 O     1 const
// RDY_ma_set_flush               O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_start_dividend              I    64
// ma_start_divisor               I    64
// ma_start_opcode                I     4
// ma_start_funct3                I     3
// ma_set_flush_c                 I     1
// EN_ma_start                    I     1
// EN_ma_set_flush                I     1
// EN_mav_result                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_srt_radix4_divider(CLK,
			     RST_N,

			     ma_start_dividend,
			     ma_start_divisor,
			     ma_start_opcode,
			     ma_start_funct3,
			     EN_ma_start,
			     RDY_ma_start,

			     EN_mav_result,
			     mav_result,
			     RDY_mav_result,

			     ma_set_flush_c,
			     EN_ma_set_flush,
			     RDY_ma_set_flush);
  input  CLK;
  input  RST_N;

  // action method ma_start
  input  [63 : 0] ma_start_dividend;
  input  [63 : 0] ma_start_divisor;
  input  [3 : 0] ma_start_opcode;
  input  [2 : 0] ma_start_funct3;
  input  EN_ma_start;
  output RDY_ma_start;

  // actionvalue method mav_result
  input  EN_mav_result;
  output [64 : 0] mav_result;
  output RDY_mav_result;

  // action method ma_set_flush
  input  ma_set_flush_c;
  input  EN_ma_set_flush;
  output RDY_ma_set_flush;

  // signals for module outputs
  wire [64 : 0] mav_result;
  wire RDY_ma_set_flush, RDY_ma_start, RDY_mav_result;

  // register rg_cntrl
  reg [2 : 0] rg_cntrl;
  reg [2 : 0] rg_cntrl$D_IN;
  wire rg_cntrl$EN;

  // register rg_div_len
  reg rg_div_len;
  wire rg_div_len$D_IN, rg_div_len$EN;

  // register rg_div_rem
  reg rg_div_rem;
  wire rg_div_rem$D_IN, rg_div_rem$EN;

  // register rg_div_sign
  reg rg_div_sign;
  wire rg_div_sign$D_IN, rg_div_sign$EN;

  // register rg_div_type
  reg rg_div_type;
  wire rg_div_type$D_IN, rg_div_type$EN;

  // register rg_dividend
  reg [63 : 0] rg_dividend;
  wire [63 : 0] rg_dividend$D_IN;
  wire rg_dividend$EN;

  // register rg_dividend1
  reg [63 : 0] rg_dividend1;
  wire [63 : 0] rg_dividend1$D_IN;
  wire rg_dividend1$EN;

  // register rg_divisor
  reg [63 : 0] rg_divisor;
  reg [63 : 0] rg_divisor$D_IN;
  wire rg_divisor$EN;

  // register rg_p_a
  reg [128 : 0] rg_p_a;
  wire [128 : 0] rg_p_a$D_IN;
  wire rg_p_a$EN;

  // register rg_q
  reg [63 : 0] rg_q;
  wire [63 : 0] rg_q$D_IN;
  wire rg_q$EN;

  // register rg_q_neg
  reg [63 : 0] rg_q_neg;
  wire [63 : 0] rg_q_neg$D_IN;
  wire rg_q_neg$EN;

  // register rg_q_pos
  reg [63 : 0] rg_q_pos;
  wire [63 : 0] rg_q_pos$D_IN;
  wire rg_q_pos$EN;

  // register rg_rem
  reg [64 : 0] rg_rem;
  wire [64 : 0] rg_rem$D_IN;
  wire rg_rem$EN;

  // register rg_rem_sign
  reg rg_rem_sign;
  wire rg_rem_sign$D_IN, rg_rem_sign$EN;

  // register rg_shift_divisor
  reg [5 : 0] rg_shift_divisor;
  wire [5 : 0] rg_shift_divisor$D_IN;
  wire rg_shift_divisor$EN;

  // register rg_special_case
  reg [2 : 0] rg_special_case;
  wire [2 : 0] rg_special_case$D_IN;
  wire rg_special_case$EN;

  // register rg_state
  reg [6 : 0] rg_state;
  wire [6 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // inputs to muxes for submodule ports
  wire [128 : 0] MUX_rg_p_a$write_1__VAL_1, MUX_rg_p_a$write_1__VAL_2;
  wire [64 : 0] MUX_rg_rem$write_1__VAL_1, MUX_rg_rem$write_1__VAL_2;
  wire [63 : 0] MUX_rg_dividend$write_1__VAL_2,
		MUX_rg_divisor$write_1__VAL_2,
		MUX_rg_divisor$write_1__VAL_3,
		MUX_rg_q_neg$write_1__VAL_2,
		MUX_rg_q_pos$write_1__VAL_2;
  wire [6 : 0] MUX_rg_state$write_1__VAL_1;
  wire MUX_rg_cntrl$write_1__SEL_1,
       MUX_rg_cntrl$write_1__SEL_2,
       MUX_rg_cntrl$write_1__SEL_8,
       MUX_rg_cntrl$write_1__SEL_9,
       MUX_rg_div_sign$write_1__VAL_2,
       MUX_rg_rem_sign$write_1__VAL_2;

  // remaining internal signals
  reg [63 : 0] v__h9020;
  reg IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172,
      IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201,
      IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262;
  wire [128 : 0] _theResult_____1_fst__h2241,
		 _theResult_____1_fst__h2245,
		 _theResult_____1_snd_fst__h2201,
		 lv_p_a__h2663,
		 p_a___1__h2225,
		 p_a___1__h2254,
		 p_a___2__h2234,
		 p_a___2__h2256,
		 p_a__h735,
		 y___1__h2197,
		 y__h733;
  wire [64 : 0] rem___1__h2541, temp__h2462;
  wire [63 : 0] IF_rg_div_rem_88_THEN_0_ELSE_rg_dividend1_89___d695,
		IF_rg_div_rem_88_THEN_rg_dividend1_89_ELSE_184_ETC___d690,
		IF_rg_div_sign_07_THEN_INV_rg_q_08_09_PLUS_0b1_ETC___d714,
		IF_rg_rem_sign_99_THEN_INV_rg_rem_97_BITS_63_T_ETC___d706,
		_theResult_____1_snd__h2226,
		_theResult_____1_snd__h2235,
		_theResult_____1_snd__h2255,
		_theResult_____1_snd__h2257,
		_theResult_____1_snd_fst__h2333,
		_theResult_____1_snd_fst__h2335,
		_theResult_____1_snd_snd__h2334,
		_theResult_____1_snd_snd__h2336,
		_theResult_____1_snd_snd_fst__h2292,
		_theResult_____1_snd_snd_snd__h2293,
		_theResult___fst__h8465,
		_theResult___fst__h8490,
		_theResult___fst__h8516,
		_theResult___fst__h9073,
		_theResult___fst__h9170,
		_theResult___snd__h8491,
		_theResult___snd__h8517,
		_theResult___snd_fst__h8606,
		dividend___1__h8241,
		dividend__h8411,
		divisor___1__h8192,
		divisor__h8413,
		lv_out___1__h9228,
		lv_out___2__h9077,
		lv_out___2__h9201,
		lv_out___2__h9276,
		lv_out___2__h9282,
		lv_out__h9332,
		lv_q_neg__h739,
		lv_q_pos__h738,
		v__h9009,
		x___1__h2540,
		x__h2460,
		x__h9330,
		y__h8787;
  wire [31 : 0] IF_rg_div_rem_88_THEN_rg_dividend1_89_ELSE_184_ETC__q5,
		ma_start_dividend_BITS_31_TO_0__q1,
		ma_start_divisor_BITS_31_TO_0__q2,
		rg_q_BITS_31_TO_0__q4,
		rg_rem_BITS_31_TO_0__q3,
		v009_BITS_31_TO_0__q6;
  wire [6 : 0] IF_NOT_rg_divisor_BIT_10_34_35_AND_NOT_rg_divi_ETC___d371,
	       IF_NOT_rg_divisor_BIT_11_36_37_AND_NOT_rg_divi_ETC___d369,
	       IF_NOT_rg_divisor_BIT_12_38_39_AND_NOT_rg_divi_ETC___d367,
	       IF_NOT_rg_divisor_BIT_13_40_41_AND_NOT_rg_divi_ETC___d365,
	       IF_NOT_rg_divisor_BIT_14_42_43_AND_NOT_rg_divi_ETC___d363,
	       IF_NOT_rg_divisor_BIT_17_96_97_AND_NOT_rg_divi_ETC___d469,
	       IF_NOT_rg_divisor_BIT_18_98_99_AND_NOT_rg_divi_ETC___d467,
	       IF_NOT_rg_divisor_BIT_19_00_01_AND_NOT_rg_divi_ETC___d465,
	       IF_NOT_rg_divisor_BIT_1_16_17_AND_NOT_rg_divis_ETC___d389,
	       IF_NOT_rg_divisor_BIT_20_02_03_AND_NOT_rg_divi_ETC___d463,
	       IF_NOT_rg_divisor_BIT_21_04_05_AND_NOT_rg_divi_ETC___d461,
	       IF_NOT_rg_divisor_BIT_22_06_07_AND_NOT_rg_divi_ETC___d459,
	       IF_NOT_rg_divisor_BIT_23_08_09_AND_NOT_rg_divi_ETC___d457,
	       IF_NOT_rg_divisor_BIT_24_10_11_AND_NOT_rg_divi_ETC___d455,
	       IF_NOT_rg_divisor_BIT_25_12_13_AND_NOT_rg_divi_ETC___d453,
	       IF_NOT_rg_divisor_BIT_26_14_15_AND_NOT_rg_divi_ETC___d451,
	       IF_NOT_rg_divisor_BIT_27_16_17_AND_NOT_rg_divi_ETC___d449,
	       IF_NOT_rg_divisor_BIT_28_18_19_AND_NOT_rg_divi_ETC___d447,
	       IF_NOT_rg_divisor_BIT_29_20_21_AND_NOT_rg_divi_ETC___d445,
	       IF_NOT_rg_divisor_BIT_2_18_19_AND_NOT_rg_divis_ETC___d387,
	       IF_NOT_rg_divisor_BIT_30_22_23_AND_NOT_rg_divi_ETC___d443,
	       IF_NOT_rg_divisor_BIT_33_76_77_AND_NOT_rg_divi_ETC___d549,
	       IF_NOT_rg_divisor_BIT_34_78_79_AND_NOT_rg_divi_ETC___d547,
	       IF_NOT_rg_divisor_BIT_35_80_81_AND_NOT_rg_divi_ETC___d545,
	       IF_NOT_rg_divisor_BIT_36_82_83_AND_NOT_rg_divi_ETC___d543,
	       IF_NOT_rg_divisor_BIT_37_84_85_AND_NOT_rg_divi_ETC___d541,
	       IF_NOT_rg_divisor_BIT_38_86_87_AND_NOT_rg_divi_ETC___d539,
	       IF_NOT_rg_divisor_BIT_39_88_89_AND_NOT_rg_divi_ETC___d537,
	       IF_NOT_rg_divisor_BIT_3_20_21_AND_NOT_rg_divis_ETC___d385,
	       IF_NOT_rg_divisor_BIT_40_90_91_AND_NOT_rg_divi_ETC___d535,
	       IF_NOT_rg_divisor_BIT_41_92_93_AND_NOT_rg_divi_ETC___d533,
	       IF_NOT_rg_divisor_BIT_42_94_95_AND_NOT_rg_divi_ETC___d531,
	       IF_NOT_rg_divisor_BIT_43_96_97_AND_NOT_rg_divi_ETC___d529,
	       IF_NOT_rg_divisor_BIT_44_98_99_AND_NOT_rg_divi_ETC___d527,
	       IF_NOT_rg_divisor_BIT_45_00_01_AND_NOT_rg_divi_ETC___d525,
	       IF_NOT_rg_divisor_BIT_46_02_03_AND_NOT_rg_divi_ETC___d523,
	       IF_NOT_rg_divisor_BIT_48_54_55_AND_NOT_rg_divi_ETC___d631,
	       IF_NOT_rg_divisor_BIT_49_56_57_AND_NOT_rg_divi_ETC___d629,
	       IF_NOT_rg_divisor_BIT_4_22_23_AND_NOT_rg_divis_ETC___d383,
	       IF_NOT_rg_divisor_BIT_50_58_59_AND_NOT_rg_divi_ETC___d627,
	       IF_NOT_rg_divisor_BIT_51_60_61_AND_NOT_rg_divi_ETC___d625,
	       IF_NOT_rg_divisor_BIT_52_62_63_AND_NOT_rg_divi_ETC___d623,
	       IF_NOT_rg_divisor_BIT_53_64_65_AND_NOT_rg_divi_ETC___d621,
	       IF_NOT_rg_divisor_BIT_54_66_67_AND_NOT_rg_divi_ETC___d619,
	       IF_NOT_rg_divisor_BIT_55_68_69_AND_NOT_rg_divi_ETC___d617,
	       IF_NOT_rg_divisor_BIT_56_70_71_AND_NOT_rg_divi_ETC___d615,
	       IF_NOT_rg_divisor_BIT_57_72_73_AND_NOT_rg_divi_ETC___d613,
	       IF_NOT_rg_divisor_BIT_58_74_75_AND_NOT_rg_divi_ETC___d611,
	       IF_NOT_rg_divisor_BIT_59_76_77_AND_NOT_rg_divi_ETC___d609,
	       IF_NOT_rg_divisor_BIT_5_24_25_AND_NOT_rg_divis_ETC___d381,
	       IF_NOT_rg_divisor_BIT_60_78_79_AND_NOT_rg_divi_ETC___d607,
	       IF_NOT_rg_divisor_BIT_61_80_81_AND_NOT_rg_divi_ETC___d605,
	       IF_NOT_rg_divisor_BIT_62_82_83_AND_NOT_rg_divi_ETC___d603,
	       IF_NOT_rg_divisor_BIT_6_26_27_AND_NOT_rg_divis_ETC___d379,
	       IF_NOT_rg_divisor_BIT_7_28_29_AND_NOT_rg_divis_ETC___d377,
	       IF_NOT_rg_divisor_BIT_8_30_31_AND_NOT_rg_divis_ETC___d375,
	       IF_NOT_rg_divisor_BIT_9_32_33_AND_NOT_rg_divis_ETC___d373,
	       IF_rg_divisor_BITS_31_TO_16_10_EQ_0_11_THEN_IF_ETC___d473,
	       IF_rg_divisor_BITS_47_TO_32_08_EQ_0_09_THEN_IF_ETC___d553,
	       IF_rg_divisor_BITS_63_TO_48_EQ_0_THEN_IF_rg_di_ETC__q7,
	       IF_rg_divisor_BIT_15_44_THEN_0_ELSE_1___d361,
	       IF_rg_divisor_BIT_31_24_THEN_0_ELSE_1___d441,
	       IF_rg_divisor_BIT_47_04_THEN_0_ELSE_1___d521,
	       IF_rg_divisor_BIT_63_84_THEN_0_ELSE_1___d601;
  wire [2 : 0] IF_IF_ma_start_opcode_EQ_0b1110_53_THEN_IF_NOT_ETC___d679;
  wire NOT_rg_p_a_BITS_128_TO_123_0_ULT_10_11___d112,
       NOT_rg_p_a_BITS_128_TO_123_0_ULT_11_39___d140,
       NOT_rg_p_a_BITS_128_TO_123_0_ULT_48_7_8_AND_rg_ETC___d93,
       NOT_rg_p_a_BITS_128_TO_123_0_ULT_54_9_85_AND_r_ETC___d239,
       NOT_rg_p_a_BITS_128_TO_123_0_ULT_7_2___d53,
       _theResult___snd__h1117,
       _theResult___snd__h1269,
       _theResult___snd__h1421,
       _theResult___snd__h1573,
       _theResult___snd__h1725,
       _theResult___snd__h1877,
       _theResult___snd__h943,
       lv_div_sign___1__h8193,
       rg_divisor_BITS_63_TO_60_EQ_0b1111_47_AND_NOT__ETC___d165,
       rg_divisor_BITS_63_TO_60_EQ_0b1111_47_AND_NOT__ETC___d194,
       rg_p_a_BITS_128_TO_123_0_ULE_10___d136,
       rg_p_a_BITS_128_TO_123_0_ULE_11___d29,
       rg_p_a_BITS_128_TO_123_0_ULE_51___d150,
       rg_p_a_BITS_128_TO_123_0_ULE_52___d132,
       rg_p_a_BITS_128_TO_123_0_ULE_53___d97,
       rg_p_a_BITS_128_TO_123_0_ULE_54___d79,
       rg_p_a_BITS_128_TO_123_0_ULE_55___d63,
       rg_p_a_BITS_128_TO_123_0_ULE_56___d38,
       rg_p_a_BITS_128_TO_123_0_ULE_57___d13,
       rg_p_a_BITS_128_TO_123_0_ULE_59___d100,
       rg_p_a_BITS_128_TO_123_0_ULE_5___d24,
       rg_p_a_BITS_128_TO_123_0_ULE_60___d41,
       rg_p_a_BITS_128_TO_123_0_ULE_61___d16,
       rg_p_a_BITS_128_TO_123_0_ULE_6___d49,
       rg_p_a_BITS_128_TO_123_0_ULE_7___d67,
       rg_p_a_BITS_128_TO_123_0_ULE_8___d83,
       rg_p_a_BITS_128_TO_123_0_ULE_9___d108,
       rg_p_a_BITS_128_TO_123_0_ULT_2___d23,
       rg_p_a_BITS_128_TO_123_0_ULT_3___d48,
       rg_p_a_BITS_128_TO_123_0_ULT_42___d148,
       rg_p_a_BITS_128_TO_123_0_ULT_44___d130,
       rg_p_a_BITS_128_TO_123_0_ULT_45___d120,
       rg_p_a_BITS_128_TO_123_0_ULT_46___d95,
       rg_p_a_BITS_128_TO_123_0_ULT_48___d77,
       rg_p_a_BITS_128_TO_123_0_ULT_49___d61,
       rg_p_a_BITS_128_TO_123_0_ULT_4___d107,
       rg_p_a_BITS_128_TO_123_0_ULT_50___d36,
       rg_p_a_BITS_128_TO_123_0_ULT_52_1_OR_NOT_rg_p__ETC___d163,
       rg_p_a_BITS_128_TO_123_0_ULT_52___d11,
       rg_p_a_BITS_128_TO_123_0_ULT_53_34_OR_NOT_rg_p_ETC___d145,
       rg_p_a_BITS_128_TO_123_0_ULT_53___d134,
       rg_p_a_BITS_128_TO_123_0_ULT_54_9_OR_NOT_rg_p__ETC___d117,
       rg_p_a_BITS_128_TO_123_0_ULT_54_9_OR_NOT_rg_p__ETC___d127,
       rg_p_a_BITS_128_TO_123_0_ULT_54___d99,
       rg_p_a_BITS_128_TO_123_0_ULT_55___d81,
       rg_p_a_BITS_128_TO_123_0_ULT_56_5_OR_NOT_rg_p__ETC___d74,
       rg_p_a_BITS_128_TO_123_0_ULT_56___d65,
       rg_p_a_BITS_128_TO_123_0_ULT_57_0_OR_NOT_rg_p__ETC___d58,
       rg_p_a_BITS_128_TO_123_0_ULT_57___d40,
       rg_p_a_BITS_128_TO_123_0_ULT_58_5_OR_NOT_rg_p__ETC___d33,
       rg_p_a_BITS_128_TO_123_0_ULT_58___d15,
       x__h9001;

  // action method ma_start
  assign RDY_ma_start = 1'd1 ;

  // actionvalue method mav_result
  assign mav_result = { x__h9001, x__h9330 } ;
  assign RDY_mav_result = 1'd1 ;

  // action method ma_set_flush
  assign RDY_ma_set_flush = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_cntrl$write_1__SEL_1 =
	     EN_ma_start && !MUX_rg_cntrl$write_1__SEL_2 ;
  assign MUX_rg_cntrl$write_1__SEL_2 = EN_ma_set_flush && ma_set_flush_c ;
  assign MUX_rg_cntrl$write_1__SEL_8 = rg_cntrl == 3'd1 && rg_state == 7'd32 ;
  assign MUX_rg_cntrl$write_1__SEL_9 = EN_mav_result && x__h9001 ;
  assign MUX_rg_div_sign$write_1__VAL_2 =
	     (rg_divisor[63] && !rg_div_type) ?
	       lv_div_sign___1__h8193 :
	       rg_dividend[63] && !rg_div_type ;
  assign MUX_rg_dividend$write_1__VAL_2 =
	     (rg_dividend[63] && !rg_div_type) ?
	       dividend___1__h8241 :
	       rg_dividend ;
  assign MUX_rg_divisor$write_1__VAL_2 =
	     (rg_divisor[63] && !rg_div_type) ?
	       divisor___1__h8192 :
	       rg_divisor ;
  assign MUX_rg_divisor$write_1__VAL_3 = rg_divisor << rg_shift_divisor ;
  assign MUX_rg_p_a$write_1__VAL_1 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 ?
	       _theResult_____1_snd_fst__h2201 :
	       _theResult_____1_fst__h2241 ;
  assign MUX_rg_p_a$write_1__VAL_2 = lv_p_a__h2663 << rg_shift_divisor ;
  assign MUX_rg_q_neg$write_1__VAL_2 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 ?
	       _theResult_____1_snd_snd_snd__h2293 :
	       _theResult_____1_snd_snd__h2334 ;
  assign MUX_rg_q_pos$write_1__VAL_2 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 ?
	       _theResult_____1_snd_snd_fst__h2292 :
	       _theResult_____1_snd_fst__h2333 ;
  assign MUX_rg_rem$write_1__VAL_1 =
	     rg_p_a[128] ? rem___1__h2541 : rg_p_a[128:64] ;
  assign MUX_rg_rem$write_1__VAL_2 = rg_rem >> rg_shift_divisor ;
  assign MUX_rg_rem_sign$write_1__VAL_2 = rg_dividend[63] && !rg_div_type ;
  assign MUX_rg_state$write_1__VAL_1 = rg_state + 7'd1 ;

  // register rg_cntrl
  always@(MUX_rg_cntrl$write_1__SEL_1 or
	  MUX_rg_cntrl$write_1__SEL_2 or
	  rg_cntrl or
	  MUX_rg_cntrl$write_1__SEL_8 or MUX_rg_cntrl$write_1__SEL_9)
  case (1'b1)
    MUX_rg_cntrl$write_1__SEL_1: rg_cntrl$D_IN = 3'd3;
    MUX_rg_cntrl$write_1__SEL_2: rg_cntrl$D_IN = 3'd0;
    rg_cntrl == 3'd3: rg_cntrl$D_IN = 3'd4;
    rg_cntrl == 3'd4: rg_cntrl$D_IN = 3'd7;
    rg_cntrl == 3'd7: rg_cntrl$D_IN = 3'd1;
    rg_cntrl == 3'd5: rg_cntrl$D_IN = 3'd6;
    rg_cntrl == 3'd2: rg_cntrl$D_IN = 3'd5;
    MUX_rg_cntrl$write_1__SEL_8: rg_cntrl$D_IN = 3'd2;
    MUX_rg_cntrl$write_1__SEL_9: rg_cntrl$D_IN = 3'd0;
    default: rg_cntrl$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign rg_cntrl$EN =
	     EN_ma_set_flush && ma_set_flush_c || EN_mav_result && x__h9001 ||
	     rg_cntrl == 3'd1 && rg_state == 7'd32 ||
	     EN_ma_start && !MUX_rg_cntrl$write_1__SEL_2 ||
	     rg_cntrl == 3'd7 ||
	     rg_cntrl == 3'd3 ||
	     rg_cntrl == 3'd2 ||
	     rg_cntrl == 3'd5 ||
	     rg_cntrl == 3'd4 ;

  // register rg_div_len
  assign rg_div_len$D_IN = ma_start_opcode == 4'b1110 ;
  assign rg_div_len$EN = MUX_rg_cntrl$write_1__SEL_1 ;

  // register rg_div_rem
  assign rg_div_rem$D_IN =
	     ma_start_funct3 == 3'b110 || ma_start_funct3 == 3'b111 ;
  assign rg_div_rem$EN = MUX_rg_cntrl$write_1__SEL_1 ;

  // register rg_div_sign
  assign rg_div_sign$D_IN =
	     !MUX_rg_cntrl$write_1__SEL_1 && MUX_rg_div_sign$write_1__VAL_2 ;
  assign rg_div_sign$EN =
	     EN_ma_start && !MUX_rg_cntrl$write_1__SEL_2 || rg_cntrl == 3'd3 ;

  // register rg_div_type
  assign rg_div_type$D_IN =
	     ma_start_funct3 == 3'b101 || ma_start_funct3 == 3'b111 ;
  assign rg_div_type$EN = MUX_rg_cntrl$write_1__SEL_1 ;

  // register rg_dividend
  assign rg_dividend$D_IN =
	     MUX_rg_cntrl$write_1__SEL_1 ?
	       dividend__h8411 :
	       MUX_rg_dividend$write_1__VAL_2 ;
  assign rg_dividend$EN =
	     EN_ma_start && !MUX_rg_cntrl$write_1__SEL_2 || rg_cntrl == 3'd3 ;

  // register rg_dividend1
  assign rg_dividend1$D_IN = dividend__h8411 ;
  assign rg_dividend1$EN = MUX_rg_cntrl$write_1__SEL_1 ;

  // register rg_divisor
  always@(MUX_rg_cntrl$write_1__SEL_1 or
	  divisor__h8413 or
	  rg_cntrl or
	  MUX_rg_divisor$write_1__VAL_2 or MUX_rg_divisor$write_1__VAL_3)
  case (1'b1)
    MUX_rg_cntrl$write_1__SEL_1: rg_divisor$D_IN = divisor__h8413;
    rg_cntrl == 3'd3: rg_divisor$D_IN = MUX_rg_divisor$write_1__VAL_2;
    rg_cntrl == 3'd7: rg_divisor$D_IN = MUX_rg_divisor$write_1__VAL_3;
    default: rg_divisor$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_divisor$EN =
	     EN_ma_start && !MUX_rg_cntrl$write_1__SEL_2 ||
	     rg_cntrl == 3'd3 ||
	     rg_cntrl == 3'd7 ;

  // register rg_p_a
  assign rg_p_a$D_IN =
	     (rg_cntrl == 3'd1) ?
	       MUX_rg_p_a$write_1__VAL_1 :
	       MUX_rg_p_a$write_1__VAL_2 ;
  assign rg_p_a$EN = rg_cntrl == 3'd1 || rg_cntrl == 3'd7 ;

  // register rg_q
  assign rg_q$D_IN = rg_p_a[128] ? x___1__h2540 : x__h2460 ;
  assign rg_q$EN = rg_cntrl == 3'd2 ;

  // register rg_q_neg
  assign rg_q_neg$D_IN =
	     MUX_rg_cntrl$write_1__SEL_1 ?
	       64'd0 :
	       MUX_rg_q_neg$write_1__VAL_2 ;
  assign rg_q_neg$EN =
	     EN_ma_start && !MUX_rg_cntrl$write_1__SEL_2 || rg_cntrl == 3'd1 ;

  // register rg_q_pos
  assign rg_q_pos$D_IN =
	     MUX_rg_cntrl$write_1__SEL_1 ?
	       64'd0 :
	       MUX_rg_q_pos$write_1__VAL_2 ;
  assign rg_q_pos$EN =
	     EN_ma_start && !MUX_rg_cntrl$write_1__SEL_2 || rg_cntrl == 3'd1 ;

  // register rg_rem
  assign rg_rem$D_IN =
	     (rg_cntrl == 3'd2) ?
	       MUX_rg_rem$write_1__VAL_1 :
	       MUX_rg_rem$write_1__VAL_2 ;
  assign rg_rem$EN = rg_cntrl == 3'd2 || rg_cntrl == 3'd5 ;

  // register rg_rem_sign
  assign rg_rem_sign$D_IN =
	     !MUX_rg_cntrl$write_1__SEL_1 && MUX_rg_rem_sign$write_1__VAL_2 ;
  assign rg_rem_sign$EN =
	     EN_ma_start && !MUX_rg_cntrl$write_1__SEL_2 || rg_cntrl == 3'd3 ;

  // register rg_shift_divisor
  assign rg_shift_divisor$D_IN =
	     MUX_rg_cntrl$write_1__SEL_2 ?
	       6'd0 :
	       IF_rg_divisor_BITS_63_TO_48_EQ_0_THEN_IF_rg_di_ETC__q7[5:0] ;
  assign rg_shift_divisor$EN =
	     EN_ma_set_flush && ma_set_flush_c || rg_cntrl == 3'd4 ;

  // register rg_special_case
  assign rg_special_case$D_IN =
	     (divisor__h8413 == 64'd0) ?
	       3'd1 :
	       IF_IF_ma_start_opcode_EQ_0b1110_53_THEN_IF_NOT_ETC___d679 ;
  assign rg_special_case$EN = MUX_rg_cntrl$write_1__SEL_1 ;

  // register rg_state
  assign rg_state$D_IN =
	     (rg_cntrl == 3'd1) ? MUX_rg_state$write_1__VAL_1 : 7'd1 ;
  assign rg_state$EN = rg_cntrl == 3'd1 || rg_cntrl == 3'd7 ;

  // remaining internal signals
  assign IF_IF_ma_start_opcode_EQ_0b1110_53_THEN_IF_NOT_ETC___d679 =
	     (dividend__h8411 == y__h8787 &&
	      divisor__h8413 == 64'hFFFFFFFFFFFFFFFF &&
	      ma_start_funct3 != 3'b101 &&
	      ma_start_funct3 != 3'b111) ?
	       3'd2 :
	       ((dividend__h8411 == divisor__h8413) ?
		  3'd3 :
		  ((divisor__h8413 == 64'd1) ? 3'd4 : 3'd0)) ;
  assign IF_NOT_rg_divisor_BIT_10_34_35_AND_NOT_rg_divi_ETC___d371 =
	     (!rg_divisor[10] && !rg_divisor[11] && !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_11_36_37_AND_NOT_rg_divi_ETC___d369 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_11_36_37_AND_NOT_rg_divi_ETC___d369 ;
  assign IF_NOT_rg_divisor_BIT_11_36_37_AND_NOT_rg_divi_ETC___d369 =
	     (!rg_divisor[11] && !rg_divisor[12] && !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_12_38_39_AND_NOT_rg_divi_ETC___d367 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_12_38_39_AND_NOT_rg_divi_ETC___d367 ;
  assign IF_NOT_rg_divisor_BIT_12_38_39_AND_NOT_rg_divi_ETC___d367 =
	     (!rg_divisor[12] && !rg_divisor[13] && !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_13_40_41_AND_NOT_rg_divi_ETC___d365 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_13_40_41_AND_NOT_rg_divi_ETC___d365 ;
  assign IF_NOT_rg_divisor_BIT_13_40_41_AND_NOT_rg_divi_ETC___d365 =
	     (!rg_divisor[13] && !rg_divisor[14] && !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_14_42_43_AND_NOT_rg_divi_ETC___d363 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_14_42_43_AND_NOT_rg_divi_ETC___d363 ;
  assign IF_NOT_rg_divisor_BIT_14_42_43_AND_NOT_rg_divi_ETC___d363 =
	     (!rg_divisor[14] && !rg_divisor[15]) ?
	       IF_rg_divisor_BIT_15_44_THEN_0_ELSE_1___d361 + 7'd1 :
	       IF_rg_divisor_BIT_15_44_THEN_0_ELSE_1___d361 ;
  assign IF_NOT_rg_divisor_BIT_17_96_97_AND_NOT_rg_divi_ETC___d469 =
	     (!rg_divisor[17] && !rg_divisor[18] && !rg_divisor[19] &&
	      !rg_divisor[20] &&
	      !rg_divisor[21] &&
	      !rg_divisor[22] &&
	      !rg_divisor[23] &&
	      !rg_divisor[24] &&
	      !rg_divisor[25] &&
	      !rg_divisor[26] &&
	      !rg_divisor[27] &&
	      !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_18_98_99_AND_NOT_rg_divi_ETC___d467 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_18_98_99_AND_NOT_rg_divi_ETC___d467 ;
  assign IF_NOT_rg_divisor_BIT_18_98_99_AND_NOT_rg_divi_ETC___d467 =
	     (!rg_divisor[18] && !rg_divisor[19] && !rg_divisor[20] &&
	      !rg_divisor[21] &&
	      !rg_divisor[22] &&
	      !rg_divisor[23] &&
	      !rg_divisor[24] &&
	      !rg_divisor[25] &&
	      !rg_divisor[26] &&
	      !rg_divisor[27] &&
	      !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_19_00_01_AND_NOT_rg_divi_ETC___d465 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_19_00_01_AND_NOT_rg_divi_ETC___d465 ;
  assign IF_NOT_rg_divisor_BIT_19_00_01_AND_NOT_rg_divi_ETC___d465 =
	     (!rg_divisor[19] && !rg_divisor[20] && !rg_divisor[21] &&
	      !rg_divisor[22] &&
	      !rg_divisor[23] &&
	      !rg_divisor[24] &&
	      !rg_divisor[25] &&
	      !rg_divisor[26] &&
	      !rg_divisor[27] &&
	      !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_20_02_03_AND_NOT_rg_divi_ETC___d463 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_20_02_03_AND_NOT_rg_divi_ETC___d463 ;
  assign IF_NOT_rg_divisor_BIT_1_16_17_AND_NOT_rg_divis_ETC___d389 =
	     (!rg_divisor[1] && !rg_divisor[2] && !rg_divisor[3] &&
	      !rg_divisor[4] &&
	      !rg_divisor[5] &&
	      !rg_divisor[6] &&
	      !rg_divisor[7] &&
	      !rg_divisor[8] &&
	      !rg_divisor[9] &&
	      !rg_divisor[10] &&
	      !rg_divisor[11] &&
	      !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_2_18_19_AND_NOT_rg_divis_ETC___d387 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_2_18_19_AND_NOT_rg_divis_ETC___d387 ;
  assign IF_NOT_rg_divisor_BIT_20_02_03_AND_NOT_rg_divi_ETC___d463 =
	     (!rg_divisor[20] && !rg_divisor[21] && !rg_divisor[22] &&
	      !rg_divisor[23] &&
	      !rg_divisor[24] &&
	      !rg_divisor[25] &&
	      !rg_divisor[26] &&
	      !rg_divisor[27] &&
	      !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_21_04_05_AND_NOT_rg_divi_ETC___d461 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_21_04_05_AND_NOT_rg_divi_ETC___d461 ;
  assign IF_NOT_rg_divisor_BIT_21_04_05_AND_NOT_rg_divi_ETC___d461 =
	     (!rg_divisor[21] && !rg_divisor[22] && !rg_divisor[23] &&
	      !rg_divisor[24] &&
	      !rg_divisor[25] &&
	      !rg_divisor[26] &&
	      !rg_divisor[27] &&
	      !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_22_06_07_AND_NOT_rg_divi_ETC___d459 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_22_06_07_AND_NOT_rg_divi_ETC___d459 ;
  assign IF_NOT_rg_divisor_BIT_22_06_07_AND_NOT_rg_divi_ETC___d459 =
	     (!rg_divisor[22] && !rg_divisor[23] && !rg_divisor[24] &&
	      !rg_divisor[25] &&
	      !rg_divisor[26] &&
	      !rg_divisor[27] &&
	      !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_23_08_09_AND_NOT_rg_divi_ETC___d457 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_23_08_09_AND_NOT_rg_divi_ETC___d457 ;
  assign IF_NOT_rg_divisor_BIT_23_08_09_AND_NOT_rg_divi_ETC___d457 =
	     (!rg_divisor[23] && !rg_divisor[24] && !rg_divisor[25] &&
	      !rg_divisor[26] &&
	      !rg_divisor[27] &&
	      !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_24_10_11_AND_NOT_rg_divi_ETC___d455 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_24_10_11_AND_NOT_rg_divi_ETC___d455 ;
  assign IF_NOT_rg_divisor_BIT_24_10_11_AND_NOT_rg_divi_ETC___d455 =
	     (!rg_divisor[24] && !rg_divisor[25] && !rg_divisor[26] &&
	      !rg_divisor[27] &&
	      !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_25_12_13_AND_NOT_rg_divi_ETC___d453 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_25_12_13_AND_NOT_rg_divi_ETC___d453 ;
  assign IF_NOT_rg_divisor_BIT_25_12_13_AND_NOT_rg_divi_ETC___d453 =
	     (!rg_divisor[25] && !rg_divisor[26] && !rg_divisor[27] &&
	      !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_26_14_15_AND_NOT_rg_divi_ETC___d451 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_26_14_15_AND_NOT_rg_divi_ETC___d451 ;
  assign IF_NOT_rg_divisor_BIT_26_14_15_AND_NOT_rg_divi_ETC___d451 =
	     (!rg_divisor[26] && !rg_divisor[27] && !rg_divisor[28] &&
	      !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_27_16_17_AND_NOT_rg_divi_ETC___d449 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_27_16_17_AND_NOT_rg_divi_ETC___d449 ;
  assign IF_NOT_rg_divisor_BIT_27_16_17_AND_NOT_rg_divi_ETC___d449 =
	     (!rg_divisor[27] && !rg_divisor[28] && !rg_divisor[29] &&
	      !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_28_18_19_AND_NOT_rg_divi_ETC___d447 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_28_18_19_AND_NOT_rg_divi_ETC___d447 ;
  assign IF_NOT_rg_divisor_BIT_28_18_19_AND_NOT_rg_divi_ETC___d447 =
	     (!rg_divisor[28] && !rg_divisor[29] && !rg_divisor[30] &&
	      !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_29_20_21_AND_NOT_rg_divi_ETC___d445 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_29_20_21_AND_NOT_rg_divi_ETC___d445 ;
  assign IF_NOT_rg_divisor_BIT_29_20_21_AND_NOT_rg_divi_ETC___d445 =
	     (!rg_divisor[29] && !rg_divisor[30] && !rg_divisor[31]) ?
	       IF_NOT_rg_divisor_BIT_30_22_23_AND_NOT_rg_divi_ETC___d443 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_30_22_23_AND_NOT_rg_divi_ETC___d443 ;
  assign IF_NOT_rg_divisor_BIT_2_18_19_AND_NOT_rg_divis_ETC___d387 =
	     (!rg_divisor[2] && !rg_divisor[3] && !rg_divisor[4] &&
	      !rg_divisor[5] &&
	      !rg_divisor[6] &&
	      !rg_divisor[7] &&
	      !rg_divisor[8] &&
	      !rg_divisor[9] &&
	      !rg_divisor[10] &&
	      !rg_divisor[11] &&
	      !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_3_20_21_AND_NOT_rg_divis_ETC___d385 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_3_20_21_AND_NOT_rg_divis_ETC___d385 ;
  assign IF_NOT_rg_divisor_BIT_30_22_23_AND_NOT_rg_divi_ETC___d443 =
	     (!rg_divisor[30] && !rg_divisor[31]) ?
	       IF_rg_divisor_BIT_31_24_THEN_0_ELSE_1___d441 + 7'd1 :
	       IF_rg_divisor_BIT_31_24_THEN_0_ELSE_1___d441 ;
  assign IF_NOT_rg_divisor_BIT_33_76_77_AND_NOT_rg_divi_ETC___d549 =
	     (!rg_divisor[33] && !rg_divisor[34] && !rg_divisor[35] &&
	      !rg_divisor[36] &&
	      !rg_divisor[37] &&
	      !rg_divisor[38] &&
	      !rg_divisor[39] &&
	      !rg_divisor[40] &&
	      !rg_divisor[41] &&
	      !rg_divisor[42] &&
	      !rg_divisor[43] &&
	      !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_34_78_79_AND_NOT_rg_divi_ETC___d547 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_34_78_79_AND_NOT_rg_divi_ETC___d547 ;
  assign IF_NOT_rg_divisor_BIT_34_78_79_AND_NOT_rg_divi_ETC___d547 =
	     (!rg_divisor[34] && !rg_divisor[35] && !rg_divisor[36] &&
	      !rg_divisor[37] &&
	      !rg_divisor[38] &&
	      !rg_divisor[39] &&
	      !rg_divisor[40] &&
	      !rg_divisor[41] &&
	      !rg_divisor[42] &&
	      !rg_divisor[43] &&
	      !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_35_80_81_AND_NOT_rg_divi_ETC___d545 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_35_80_81_AND_NOT_rg_divi_ETC___d545 ;
  assign IF_NOT_rg_divisor_BIT_35_80_81_AND_NOT_rg_divi_ETC___d545 =
	     (!rg_divisor[35] && !rg_divisor[36] && !rg_divisor[37] &&
	      !rg_divisor[38] &&
	      !rg_divisor[39] &&
	      !rg_divisor[40] &&
	      !rg_divisor[41] &&
	      !rg_divisor[42] &&
	      !rg_divisor[43] &&
	      !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_36_82_83_AND_NOT_rg_divi_ETC___d543 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_36_82_83_AND_NOT_rg_divi_ETC___d543 ;
  assign IF_NOT_rg_divisor_BIT_36_82_83_AND_NOT_rg_divi_ETC___d543 =
	     (!rg_divisor[36] && !rg_divisor[37] && !rg_divisor[38] &&
	      !rg_divisor[39] &&
	      !rg_divisor[40] &&
	      !rg_divisor[41] &&
	      !rg_divisor[42] &&
	      !rg_divisor[43] &&
	      !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_37_84_85_AND_NOT_rg_divi_ETC___d541 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_37_84_85_AND_NOT_rg_divi_ETC___d541 ;
  assign IF_NOT_rg_divisor_BIT_37_84_85_AND_NOT_rg_divi_ETC___d541 =
	     (!rg_divisor[37] && !rg_divisor[38] && !rg_divisor[39] &&
	      !rg_divisor[40] &&
	      !rg_divisor[41] &&
	      !rg_divisor[42] &&
	      !rg_divisor[43] &&
	      !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_38_86_87_AND_NOT_rg_divi_ETC___d539 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_38_86_87_AND_NOT_rg_divi_ETC___d539 ;
  assign IF_NOT_rg_divisor_BIT_38_86_87_AND_NOT_rg_divi_ETC___d539 =
	     (!rg_divisor[38] && !rg_divisor[39] && !rg_divisor[40] &&
	      !rg_divisor[41] &&
	      !rg_divisor[42] &&
	      !rg_divisor[43] &&
	      !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_39_88_89_AND_NOT_rg_divi_ETC___d537 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_39_88_89_AND_NOT_rg_divi_ETC___d537 ;
  assign IF_NOT_rg_divisor_BIT_39_88_89_AND_NOT_rg_divi_ETC___d537 =
	     (!rg_divisor[39] && !rg_divisor[40] && !rg_divisor[41] &&
	      !rg_divisor[42] &&
	      !rg_divisor[43] &&
	      !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_40_90_91_AND_NOT_rg_divi_ETC___d535 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_40_90_91_AND_NOT_rg_divi_ETC___d535 ;
  assign IF_NOT_rg_divisor_BIT_3_20_21_AND_NOT_rg_divis_ETC___d385 =
	     (!rg_divisor[3] && !rg_divisor[4] && !rg_divisor[5] &&
	      !rg_divisor[6] &&
	      !rg_divisor[7] &&
	      !rg_divisor[8] &&
	      !rg_divisor[9] &&
	      !rg_divisor[10] &&
	      !rg_divisor[11] &&
	      !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_4_22_23_AND_NOT_rg_divis_ETC___d383 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_4_22_23_AND_NOT_rg_divis_ETC___d383 ;
  assign IF_NOT_rg_divisor_BIT_40_90_91_AND_NOT_rg_divi_ETC___d535 =
	     (!rg_divisor[40] && !rg_divisor[41] && !rg_divisor[42] &&
	      !rg_divisor[43] &&
	      !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_41_92_93_AND_NOT_rg_divi_ETC___d533 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_41_92_93_AND_NOT_rg_divi_ETC___d533 ;
  assign IF_NOT_rg_divisor_BIT_41_92_93_AND_NOT_rg_divi_ETC___d533 =
	     (!rg_divisor[41] && !rg_divisor[42] && !rg_divisor[43] &&
	      !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_42_94_95_AND_NOT_rg_divi_ETC___d531 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_42_94_95_AND_NOT_rg_divi_ETC___d531 ;
  assign IF_NOT_rg_divisor_BIT_42_94_95_AND_NOT_rg_divi_ETC___d531 =
	     (!rg_divisor[42] && !rg_divisor[43] && !rg_divisor[44] &&
	      !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_43_96_97_AND_NOT_rg_divi_ETC___d529 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_43_96_97_AND_NOT_rg_divi_ETC___d529 ;
  assign IF_NOT_rg_divisor_BIT_43_96_97_AND_NOT_rg_divi_ETC___d529 =
	     (!rg_divisor[43] && !rg_divisor[44] && !rg_divisor[45] &&
	      !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_44_98_99_AND_NOT_rg_divi_ETC___d527 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_44_98_99_AND_NOT_rg_divi_ETC___d527 ;
  assign IF_NOT_rg_divisor_BIT_44_98_99_AND_NOT_rg_divi_ETC___d527 =
	     (!rg_divisor[44] && !rg_divisor[45] && !rg_divisor[46] &&
	      !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_45_00_01_AND_NOT_rg_divi_ETC___d525 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_45_00_01_AND_NOT_rg_divi_ETC___d525 ;
  assign IF_NOT_rg_divisor_BIT_45_00_01_AND_NOT_rg_divi_ETC___d525 =
	     (!rg_divisor[45] && !rg_divisor[46] && !rg_divisor[47]) ?
	       IF_NOT_rg_divisor_BIT_46_02_03_AND_NOT_rg_divi_ETC___d523 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_46_02_03_AND_NOT_rg_divi_ETC___d523 ;
  assign IF_NOT_rg_divisor_BIT_46_02_03_AND_NOT_rg_divi_ETC___d523 =
	     (!rg_divisor[46] && !rg_divisor[47]) ?
	       IF_rg_divisor_BIT_47_04_THEN_0_ELSE_1___d521 + 7'd1 :
	       IF_rg_divisor_BIT_47_04_THEN_0_ELSE_1___d521 ;
  assign IF_NOT_rg_divisor_BIT_48_54_55_AND_NOT_rg_divi_ETC___d631 =
	     (!rg_divisor[48] && !rg_divisor[49] && !rg_divisor[50] &&
	      !rg_divisor[51] &&
	      !rg_divisor[52] &&
	      !rg_divisor[53] &&
	      !rg_divisor[54] &&
	      !rg_divisor[55] &&
	      !rg_divisor[56] &&
	      !rg_divisor[57] &&
	      !rg_divisor[58] &&
	      !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_49_56_57_AND_NOT_rg_divi_ETC___d629 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_49_56_57_AND_NOT_rg_divi_ETC___d629 ;
  assign IF_NOT_rg_divisor_BIT_49_56_57_AND_NOT_rg_divi_ETC___d629 =
	     (!rg_divisor[49] && !rg_divisor[50] && !rg_divisor[51] &&
	      !rg_divisor[52] &&
	      !rg_divisor[53] &&
	      !rg_divisor[54] &&
	      !rg_divisor[55] &&
	      !rg_divisor[56] &&
	      !rg_divisor[57] &&
	      !rg_divisor[58] &&
	      !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_50_58_59_AND_NOT_rg_divi_ETC___d627 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_50_58_59_AND_NOT_rg_divi_ETC___d627 ;
  assign IF_NOT_rg_divisor_BIT_4_22_23_AND_NOT_rg_divis_ETC___d383 =
	     (!rg_divisor[4] && !rg_divisor[5] && !rg_divisor[6] &&
	      !rg_divisor[7] &&
	      !rg_divisor[8] &&
	      !rg_divisor[9] &&
	      !rg_divisor[10] &&
	      !rg_divisor[11] &&
	      !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_5_24_25_AND_NOT_rg_divis_ETC___d381 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_5_24_25_AND_NOT_rg_divis_ETC___d381 ;
  assign IF_NOT_rg_divisor_BIT_50_58_59_AND_NOT_rg_divi_ETC___d627 =
	     (!rg_divisor[50] && !rg_divisor[51] && !rg_divisor[52] &&
	      !rg_divisor[53] &&
	      !rg_divisor[54] &&
	      !rg_divisor[55] &&
	      !rg_divisor[56] &&
	      !rg_divisor[57] &&
	      !rg_divisor[58] &&
	      !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_51_60_61_AND_NOT_rg_divi_ETC___d625 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_51_60_61_AND_NOT_rg_divi_ETC___d625 ;
  assign IF_NOT_rg_divisor_BIT_51_60_61_AND_NOT_rg_divi_ETC___d625 =
	     (!rg_divisor[51] && !rg_divisor[52] && !rg_divisor[53] &&
	      !rg_divisor[54] &&
	      !rg_divisor[55] &&
	      !rg_divisor[56] &&
	      !rg_divisor[57] &&
	      !rg_divisor[58] &&
	      !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_52_62_63_AND_NOT_rg_divi_ETC___d623 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_52_62_63_AND_NOT_rg_divi_ETC___d623 ;
  assign IF_NOT_rg_divisor_BIT_52_62_63_AND_NOT_rg_divi_ETC___d623 =
	     (!rg_divisor[52] && !rg_divisor[53] && !rg_divisor[54] &&
	      !rg_divisor[55] &&
	      !rg_divisor[56] &&
	      !rg_divisor[57] &&
	      !rg_divisor[58] &&
	      !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_53_64_65_AND_NOT_rg_divi_ETC___d621 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_53_64_65_AND_NOT_rg_divi_ETC___d621 ;
  assign IF_NOT_rg_divisor_BIT_53_64_65_AND_NOT_rg_divi_ETC___d621 =
	     (!rg_divisor[53] && !rg_divisor[54] && !rg_divisor[55] &&
	      !rg_divisor[56] &&
	      !rg_divisor[57] &&
	      !rg_divisor[58] &&
	      !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_54_66_67_AND_NOT_rg_divi_ETC___d619 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_54_66_67_AND_NOT_rg_divi_ETC___d619 ;
  assign IF_NOT_rg_divisor_BIT_54_66_67_AND_NOT_rg_divi_ETC___d619 =
	     (!rg_divisor[54] && !rg_divisor[55] && !rg_divisor[56] &&
	      !rg_divisor[57] &&
	      !rg_divisor[58] &&
	      !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_55_68_69_AND_NOT_rg_divi_ETC___d617 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_55_68_69_AND_NOT_rg_divi_ETC___d617 ;
  assign IF_NOT_rg_divisor_BIT_55_68_69_AND_NOT_rg_divi_ETC___d617 =
	     (!rg_divisor[55] && !rg_divisor[56] && !rg_divisor[57] &&
	      !rg_divisor[58] &&
	      !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_56_70_71_AND_NOT_rg_divi_ETC___d615 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_56_70_71_AND_NOT_rg_divi_ETC___d615 ;
  assign IF_NOT_rg_divisor_BIT_56_70_71_AND_NOT_rg_divi_ETC___d615 =
	     (!rg_divisor[56] && !rg_divisor[57] && !rg_divisor[58] &&
	      !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_57_72_73_AND_NOT_rg_divi_ETC___d613 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_57_72_73_AND_NOT_rg_divi_ETC___d613 ;
  assign IF_NOT_rg_divisor_BIT_57_72_73_AND_NOT_rg_divi_ETC___d613 =
	     (!rg_divisor[57] && !rg_divisor[58] && !rg_divisor[59] &&
	      !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_58_74_75_AND_NOT_rg_divi_ETC___d611 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_58_74_75_AND_NOT_rg_divi_ETC___d611 ;
  assign IF_NOT_rg_divisor_BIT_58_74_75_AND_NOT_rg_divi_ETC___d611 =
	     (!rg_divisor[58] && !rg_divisor[59] && !rg_divisor[60] &&
	      !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_59_76_77_AND_NOT_rg_divi_ETC___d609 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_59_76_77_AND_NOT_rg_divi_ETC___d609 ;
  assign IF_NOT_rg_divisor_BIT_59_76_77_AND_NOT_rg_divi_ETC___d609 =
	     (!rg_divisor[59] && !rg_divisor[60] && !rg_divisor[61] &&
	      !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_60_78_79_AND_NOT_rg_divi_ETC___d607 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_60_78_79_AND_NOT_rg_divi_ETC___d607 ;
  assign IF_NOT_rg_divisor_BIT_5_24_25_AND_NOT_rg_divis_ETC___d381 =
	     (!rg_divisor[5] && !rg_divisor[6] && !rg_divisor[7] &&
	      !rg_divisor[8] &&
	      !rg_divisor[9] &&
	      !rg_divisor[10] &&
	      !rg_divisor[11] &&
	      !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_6_26_27_AND_NOT_rg_divis_ETC___d379 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_6_26_27_AND_NOT_rg_divis_ETC___d379 ;
  assign IF_NOT_rg_divisor_BIT_60_78_79_AND_NOT_rg_divi_ETC___d607 =
	     (!rg_divisor[60] && !rg_divisor[61] && !rg_divisor[62] &&
	      !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_61_80_81_AND_NOT_rg_divi_ETC___d605 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_61_80_81_AND_NOT_rg_divi_ETC___d605 ;
  assign IF_NOT_rg_divisor_BIT_61_80_81_AND_NOT_rg_divi_ETC___d605 =
	     (!rg_divisor[61] && !rg_divisor[62] && !rg_divisor[63]) ?
	       IF_NOT_rg_divisor_BIT_62_82_83_AND_NOT_rg_divi_ETC___d603 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_62_82_83_AND_NOT_rg_divi_ETC___d603 ;
  assign IF_NOT_rg_divisor_BIT_62_82_83_AND_NOT_rg_divi_ETC___d603 =
	     (!rg_divisor[62] && !rg_divisor[63]) ?
	       IF_rg_divisor_BIT_63_84_THEN_0_ELSE_1___d601 + 7'd1 :
	       IF_rg_divisor_BIT_63_84_THEN_0_ELSE_1___d601 ;
  assign IF_NOT_rg_divisor_BIT_6_26_27_AND_NOT_rg_divis_ETC___d379 =
	     (!rg_divisor[6] && !rg_divisor[7] && !rg_divisor[8] &&
	      !rg_divisor[9] &&
	      !rg_divisor[10] &&
	      !rg_divisor[11] &&
	      !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_7_28_29_AND_NOT_rg_divis_ETC___d377 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_7_28_29_AND_NOT_rg_divis_ETC___d377 ;
  assign IF_NOT_rg_divisor_BIT_7_28_29_AND_NOT_rg_divis_ETC___d377 =
	     (!rg_divisor[7] && !rg_divisor[8] && !rg_divisor[9] &&
	      !rg_divisor[10] &&
	      !rg_divisor[11] &&
	      !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_8_30_31_AND_NOT_rg_divis_ETC___d375 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_8_30_31_AND_NOT_rg_divis_ETC___d375 ;
  assign IF_NOT_rg_divisor_BIT_8_30_31_AND_NOT_rg_divis_ETC___d375 =
	     (!rg_divisor[8] && !rg_divisor[9] && !rg_divisor[10] &&
	      !rg_divisor[11] &&
	      !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_9_32_33_AND_NOT_rg_divis_ETC___d373 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_9_32_33_AND_NOT_rg_divis_ETC___d373 ;
  assign IF_NOT_rg_divisor_BIT_9_32_33_AND_NOT_rg_divis_ETC___d373 =
	     (!rg_divisor[9] && !rg_divisor[10] && !rg_divisor[11] &&
	      !rg_divisor[12] &&
	      !rg_divisor[13] &&
	      !rg_divisor[14] &&
	      !rg_divisor[15]) ?
	       IF_NOT_rg_divisor_BIT_10_34_35_AND_NOT_rg_divi_ETC___d371 +
	       7'd1 :
	       IF_NOT_rg_divisor_BIT_10_34_35_AND_NOT_rg_divi_ETC___d371 ;
  assign IF_rg_div_rem_88_THEN_0_ELSE_rg_dividend1_89___d695 =
	     rg_div_rem ? 64'd0 : rg_dividend1 ;
  assign IF_rg_div_rem_88_THEN_rg_dividend1_89_ELSE_184_ETC___d690 =
	     rg_div_rem ? rg_dividend1 : 64'hFFFFFFFFFFFFFFFF ;
  assign IF_rg_div_rem_88_THEN_rg_dividend1_89_ELSE_184_ETC__q5 =
	     IF_rg_div_rem_88_THEN_rg_dividend1_89_ELSE_184_ETC___d690[31:0] ;
  assign IF_rg_div_sign_07_THEN_INV_rg_q_08_09_PLUS_0b1_ETC___d714 =
	     rg_div_sign ?
	       lv_out___2__h9276 :
	       (rg_div_len ? lv_out___2__h9282 : rg_q) ;
  assign IF_rg_divisor_BITS_31_TO_16_10_EQ_0_11_THEN_IF_ETC___d473 =
	     (rg_divisor[31:16] == 16'd0) ?
	       ((rg_divisor[15:0] == 16'd0) ?
		  7'd64 :
		  ((!rg_divisor[0] && !rg_divisor[1] && !rg_divisor[2] &&
		    !rg_divisor[3] &&
		    !rg_divisor[4] &&
		    !rg_divisor[5] &&
		    !rg_divisor[6] &&
		    !rg_divisor[7] &&
		    !rg_divisor[8] &&
		    !rg_divisor[9] &&
		    !rg_divisor[10] &&
		    !rg_divisor[11] &&
		    !rg_divisor[12] &&
		    !rg_divisor[13] &&
		    !rg_divisor[14] &&
		    !rg_divisor[15]) ?
		     IF_NOT_rg_divisor_BIT_1_16_17_AND_NOT_rg_divis_ETC___d389 +
		     7'd1 :
		     IF_NOT_rg_divisor_BIT_1_16_17_AND_NOT_rg_divis_ETC___d389) +
		  7'd48) :
	       ((!rg_divisor[16] && !rg_divisor[17] && !rg_divisor[18] &&
		 !rg_divisor[19] &&
		 !rg_divisor[20] &&
		 !rg_divisor[21] &&
		 !rg_divisor[22] &&
		 !rg_divisor[23] &&
		 !rg_divisor[24] &&
		 !rg_divisor[25] &&
		 !rg_divisor[26] &&
		 !rg_divisor[27] &&
		 !rg_divisor[28] &&
		 !rg_divisor[29] &&
		 !rg_divisor[30] &&
		 !rg_divisor[31]) ?
		  IF_NOT_rg_divisor_BIT_17_96_97_AND_NOT_rg_divi_ETC___d469 +
		  7'd1 :
		  IF_NOT_rg_divisor_BIT_17_96_97_AND_NOT_rg_divi_ETC___d469) +
	       7'd32 ;
  assign IF_rg_divisor_BITS_47_TO_32_08_EQ_0_09_THEN_IF_ETC___d553 =
	     (rg_divisor[47:32] == 16'd0) ?
	       IF_rg_divisor_BITS_31_TO_16_10_EQ_0_11_THEN_IF_ETC___d473 :
	       ((!rg_divisor[32] && !rg_divisor[33] && !rg_divisor[34] &&
		 !rg_divisor[35] &&
		 !rg_divisor[36] &&
		 !rg_divisor[37] &&
		 !rg_divisor[38] &&
		 !rg_divisor[39] &&
		 !rg_divisor[40] &&
		 !rg_divisor[41] &&
		 !rg_divisor[42] &&
		 !rg_divisor[43] &&
		 !rg_divisor[44] &&
		 !rg_divisor[45] &&
		 !rg_divisor[46] &&
		 !rg_divisor[47]) ?
		  IF_NOT_rg_divisor_BIT_33_76_77_AND_NOT_rg_divi_ETC___d549 +
		  7'd1 :
		  IF_NOT_rg_divisor_BIT_33_76_77_AND_NOT_rg_divi_ETC___d549) +
	       7'd16 ;
  assign IF_rg_divisor_BITS_63_TO_48_EQ_0_THEN_IF_rg_di_ETC__q7 =
	     (rg_divisor[63:48] == 16'd0) ?
	       IF_rg_divisor_BITS_47_TO_32_08_EQ_0_09_THEN_IF_ETC___d553 :
	       IF_NOT_rg_divisor_BIT_48_54_55_AND_NOT_rg_divi_ETC___d631 ;
  assign IF_rg_divisor_BIT_15_44_THEN_0_ELSE_1___d361 =
	     rg_divisor[15] ? 7'd0 : 7'd1 ;
  assign IF_rg_divisor_BIT_31_24_THEN_0_ELSE_1___d441 =
	     rg_divisor[31] ? 7'd0 : 7'd1 ;
  assign IF_rg_divisor_BIT_47_04_THEN_0_ELSE_1___d521 =
	     rg_divisor[47] ? 7'd0 : 7'd1 ;
  assign IF_rg_divisor_BIT_63_84_THEN_0_ELSE_1___d601 =
	     rg_divisor[63] ? 7'd0 : 7'd1 ;
  assign IF_rg_rem_sign_99_THEN_INV_rg_rem_97_BITS_63_T_ETC___d706 =
	     rg_rem_sign ?
	       lv_out___2__h9201 :
	       (rg_div_len ? lv_out___1__h9228 : rg_rem[63:0]) ;
  assign NOT_rg_p_a_BITS_128_TO_123_0_ULT_10_11___d112 =
	     rg_p_a[128:123] >= 6'd10 ;
  assign NOT_rg_p_a_BITS_128_TO_123_0_ULT_11_39___d140 =
	     rg_p_a[128:123] >= 6'd11 ;
  assign NOT_rg_p_a_BITS_128_TO_123_0_ULT_48_7_8_AND_rg_ETC___d93 =
	     !rg_p_a_BITS_128_TO_123_0_ULT_48___d77 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_54___d79 ||
	     (rg_p_a_BITS_128_TO_123_0_ULT_55___d81 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_60___d41) &&
	     (rg_p_a_BITS_128_TO_123_0_ULT_3___d48 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_8___d83) &&
	     rg_p_a[128:123] >= 6'd9 &&
	     rg_p_a[128:123] <= 6'd15 ;
  assign NOT_rg_p_a_BITS_128_TO_123_0_ULT_54_9_85_AND_r_ETC___d239 =
	     !rg_p_a_BITS_128_TO_123_0_ULT_54___d99 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_59___d100 ||
	     !rg_p_a_BITS_128_TO_123_0_ULT_4___d107 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_9___d108 ;
  assign NOT_rg_p_a_BITS_128_TO_123_0_ULT_7_2___d53 =
	     rg_p_a[128:123] >= 6'd7 ;
  assign _theResult_____1_fst__h2241 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 ?
	       _theResult_____1_fst__h2245 :
	       p_a__h735 ;
  assign _theResult_____1_fst__h2245 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 ?
	       p_a___1__h2254 :
	       p_a___2__h2256 ;
  assign _theResult_____1_snd__h2226 = { rg_q_neg[61:0], 2'd2 } ;
  assign _theResult_____1_snd__h2235 = { rg_q_pos[61:0], 2'd2 } ;
  assign _theResult_____1_snd__h2255 = { rg_q_neg[61:0], 2'd1 } ;
  assign _theResult_____1_snd__h2257 = { rg_q_pos[61:0], 2'd1 } ;
  assign _theResult_____1_snd_fst__h2201 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 ?
	       p_a___1__h2225 :
	       p_a___2__h2234 ;
  assign _theResult_____1_snd_fst__h2333 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 ?
	       _theResult_____1_snd_fst__h2335 :
	       lv_q_pos__h738 ;
  assign _theResult_____1_snd_fst__h2335 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 ?
	       lv_q_pos__h738 :
	       _theResult_____1_snd__h2257 ;
  assign _theResult_____1_snd_snd__h2334 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 ?
	       _theResult_____1_snd_snd__h2336 :
	       lv_q_neg__h739 ;
  assign _theResult_____1_snd_snd__h2336 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 ?
	       _theResult_____1_snd__h2255 :
	       lv_q_neg__h739 ;
  assign _theResult_____1_snd_snd_fst__h2292 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 ?
	       lv_q_pos__h738 :
	       _theResult_____1_snd__h2235 ;
  assign _theResult_____1_snd_snd_snd__h2293 =
	     IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 ?
	       _theResult_____1_snd__h2226 :
	       lv_q_neg__h739 ;
  assign _theResult___fst__h8465 =
	     (ma_start_funct3 != 3'b101 && ma_start_funct3 != 3'b111) ?
	       _theResult___fst__h8490 :
	       _theResult___fst__h8516 ;
  assign _theResult___fst__h8490 =
	     { {32{ma_start_dividend_BITS_31_TO_0__q1[31]}},
	       ma_start_dividend_BITS_31_TO_0__q1 } ;
  assign _theResult___fst__h8516 = { 32'd0, ma_start_dividend[31:0] } ;
  assign _theResult___fst__h9073 =
	     rg_div_len ?
	       lv_out___2__h9077 :
	       IF_rg_div_rem_88_THEN_rg_dividend1_89_ELSE_184_ETC___d690 ;
  assign _theResult___fst__h9170 = rg_div_rem ? 64'd0 : 64'd1 ;
  assign _theResult___snd__h1117 =
	     !rg_p_a_BITS_128_TO_123_0_ULT_50___d36 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_56___d38 ||
	     !rg_p_a_BITS_128_TO_123_0_ULT_57___d40 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_60___d41 ;
  assign _theResult___snd__h1269 =
	     !rg_p_a_BITS_128_TO_123_0_ULT_49___d61 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_55___d63 ||
	     !rg_p_a_BITS_128_TO_123_0_ULT_56___d65 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_60___d41 ;
  assign _theResult___snd__h1421 =
	     !rg_p_a_BITS_128_TO_123_0_ULT_48___d77 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_54___d79 ||
	     !rg_p_a_BITS_128_TO_123_0_ULT_55___d81 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_60___d41 ;
  assign _theResult___snd__h1573 =
	     !rg_p_a_BITS_128_TO_123_0_ULT_46___d95 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_53___d97 ||
	     !rg_p_a_BITS_128_TO_123_0_ULT_54___d99 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_59___d100 ;
  assign _theResult___snd__h1725 =
	     !rg_p_a_BITS_128_TO_123_0_ULT_45___d120 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_53___d97 ||
	     !rg_p_a_BITS_128_TO_123_0_ULT_54___d99 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_59___d100 ;
  assign _theResult___snd__h1877 =
	     !rg_p_a_BITS_128_TO_123_0_ULT_44___d130 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_52___d132 ||
	     !rg_p_a_BITS_128_TO_123_0_ULT_53___d134 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_59___d100 ;
  assign _theResult___snd__h8491 =
	     { {32{ma_start_divisor_BITS_31_TO_0__q2[31]}},
	       ma_start_divisor_BITS_31_TO_0__q2 } ;
  assign _theResult___snd__h8517 = { 32'd0, ma_start_divisor[31:0] } ;
  assign _theResult___snd__h943 =
	     !rg_p_a_BITS_128_TO_123_0_ULT_52___d11 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_57___d13 ||
	     !rg_p_a_BITS_128_TO_123_0_ULT_58___d15 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_61___d16 ;
  assign _theResult___snd_fst__h8606 =
	     (ma_start_funct3 != 3'b101 && ma_start_funct3 != 3'b111) ?
	       _theResult___snd__h8491 :
	       _theResult___snd__h8517 ;
  assign dividend___1__h8241 =
	     ~rg_dividend +
	     64'b0000000000000000000000000000000000000000000000000000000000000001 ;
  assign dividend__h8411 =
	     (ma_start_opcode == 4'b1110) ?
	       _theResult___fst__h8465 :
	       ma_start_dividend ;
  assign divisor___1__h8192 =
	     ~rg_divisor +
	     64'b0000000000000000000000000000000000000000000000000000000000000001 ;
  assign divisor__h8413 =
	     (ma_start_opcode == 4'b1110) ?
	       _theResult___snd_fst__h8606 :
	       ma_start_divisor ;
  assign lv_div_sign___1__h8193 = ~(rg_dividend[63] && !rg_div_type) ;
  assign lv_out___1__h9228 =
	     { {32{rg_rem_BITS_31_TO_0__q3[31]}}, rg_rem_BITS_31_TO_0__q3 } ;
  assign lv_out___2__h9077 =
	     { {32{IF_rg_div_rem_88_THEN_rg_dividend1_89_ELSE_184_ETC__q5[31]}},
	       IF_rg_div_rem_88_THEN_rg_dividend1_89_ELSE_184_ETC__q5 } ;
  assign lv_out___2__h9201 =
	     ~rg_rem[63:0] +
	     64'b0000000000000000000000000000000000000000000000000000000000000001 ;
  assign lv_out___2__h9276 =
	     ~rg_q +
	     64'b0000000000000000000000000000000000000000000000000000000000000001 ;
  assign lv_out___2__h9282 =
	     { {32{rg_q_BITS_31_TO_0__q4[31]}}, rg_q_BITS_31_TO_0__q4 } ;
  assign lv_out__h9332 =
	     { {32{v009_BITS_31_TO_0__q6[31]}}, v009_BITS_31_TO_0__q6 } ;
  assign lv_p_a__h2663 = { 65'd0, rg_dividend } ;
  assign lv_q_neg__h739 = { rg_q_neg[61:0], 2'd0 } ;
  assign lv_q_pos__h738 = { rg_q_pos[61:0], 2'd0 } ;
  assign ma_start_dividend_BITS_31_TO_0__q1 = ma_start_dividend[31:0] ;
  assign ma_start_divisor_BITS_31_TO_0__q2 = ma_start_divisor[31:0] ;
  assign p_a___1__h2225 = p_a__h735 + y___1__h2197 ;
  assign p_a___1__h2254 = p_a__h735 + y__h733 ;
  assign p_a___2__h2234 = p_a__h735 - y___1__h2197 ;
  assign p_a___2__h2256 = p_a__h735 - y__h733 ;
  assign p_a__h735 = { rg_p_a[126:0], 2'd0 } ;
  assign rem___1__h2541 = rg_p_a[128:64] + temp__h2462 ;
  assign rg_divisor_BITS_63_TO_60_EQ_0b1111_47_AND_NOT__ETC___d165 =
	     rg_divisor[63:60] == 4'b1111 &&
	     (!rg_p_a_BITS_128_TO_123_0_ULT_42___d148 &&
	      rg_p_a_BITS_128_TO_123_0_ULE_51___d150 ||
	      rg_p_a_BITS_128_TO_123_0_ULT_52_1_OR_NOT_rg_p__ETC___d163) ;
  assign rg_divisor_BITS_63_TO_60_EQ_0b1111_47_AND_NOT__ETC___d194 =
	     rg_divisor[63:60] == 4'b1111 &&
	     (!rg_p_a_BITS_128_TO_123_0_ULT_42___d148 &&
	      rg_p_a_BITS_128_TO_123_0_ULE_51___d150 ||
	      !rg_p_a_BITS_128_TO_123_0_ULT_52___d11 &&
	      rg_p_a_BITS_128_TO_123_0_ULE_60___d41) ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_10___d136 = rg_p_a[128:123] <= 6'd10 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_11___d29 = rg_p_a[128:123] <= 6'd11 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_51___d150 = rg_p_a[128:123] <= 6'd51 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_52___d132 = rg_p_a[128:123] <= 6'd52 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_53___d97 = rg_p_a[128:123] <= 6'd53 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_54___d79 = rg_p_a[128:123] <= 6'd54 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_55___d63 = rg_p_a[128:123] <= 6'd55 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_56___d38 = rg_p_a[128:123] <= 6'd56 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_57___d13 = rg_p_a[128:123] <= 6'd57 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_59___d100 = rg_p_a[128:123] <= 6'd59 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_5___d24 = rg_p_a[128:123] <= 6'd5 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_60___d41 = rg_p_a[128:123] <= 6'd60 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_61___d16 = rg_p_a[128:123] <= 6'd61 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_6___d49 = rg_p_a[128:123] <= 6'd6 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_7___d67 = rg_p_a[128:123] <= 6'd7 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_8___d83 = rg_p_a[128:123] <= 6'd8 ;
  assign rg_p_a_BITS_128_TO_123_0_ULE_9___d108 = rg_p_a[128:123] <= 6'd9 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_2___d23 = rg_p_a[128:123] < 6'd2 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_3___d48 = rg_p_a[128:123] < 6'd3 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_42___d148 = rg_p_a[128:123] < 6'd42 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_44___d130 = rg_p_a[128:123] < 6'd44 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_45___d120 = rg_p_a[128:123] < 6'd45 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_46___d95 = rg_p_a[128:123] < 6'd46 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_48___d77 = rg_p_a[128:123] < 6'd48 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_49___d61 = rg_p_a[128:123] < 6'd49 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_4___d107 = rg_p_a[128:123] < 6'd4 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_50___d36 = rg_p_a[128:123] < 6'd50 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_52_1_OR_NOT_rg_p__ETC___d163 =
	     (rg_p_a_BITS_128_TO_123_0_ULT_52___d11 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_60___d41) &&
	     (rg_p_a_BITS_128_TO_123_0_ULT_3___d48 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_11___d29) &&
	     NOT_rg_p_a_BITS_128_TO_123_0_ULT_11_39___d140 &&
	     rg_p_a[128:123] <= 6'd21 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_52___d11 = rg_p_a[128:123] < 6'd52 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_53_34_OR_NOT_rg_p_ETC___d145 =
	     (rg_p_a_BITS_128_TO_123_0_ULT_53___d134 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_59___d100) &&
	     (rg_p_a_BITS_128_TO_123_0_ULT_4___d107 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_10___d136) &&
	     NOT_rg_p_a_BITS_128_TO_123_0_ULT_11_39___d140 &&
	     rg_p_a[128:123] <= 6'd19 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_53___d134 = rg_p_a[128:123] < 6'd53 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_54_9_OR_NOT_rg_p__ETC___d117 =
	     (rg_p_a_BITS_128_TO_123_0_ULT_54___d99 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_59___d100) &&
	     (rg_p_a_BITS_128_TO_123_0_ULT_4___d107 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_9___d108) &&
	     NOT_rg_p_a_BITS_128_TO_123_0_ULT_10_11___d112 &&
	     rg_p_a[128:123] <= 6'd17 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_54_9_OR_NOT_rg_p__ETC___d127 =
	     (rg_p_a_BITS_128_TO_123_0_ULT_54___d99 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_59___d100) &&
	     (rg_p_a_BITS_128_TO_123_0_ULT_4___d107 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_9___d108) &&
	     NOT_rg_p_a_BITS_128_TO_123_0_ULT_10_11___d112 &&
	     rg_p_a[128:123] <= 6'd18 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_54___d99 = rg_p_a[128:123] < 6'd54 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_55___d81 = rg_p_a[128:123] < 6'd55 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_56_5_OR_NOT_rg_p__ETC___d74 =
	     (rg_p_a_BITS_128_TO_123_0_ULT_56___d65 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_60___d41) &&
	     (rg_p_a_BITS_128_TO_123_0_ULT_3___d48 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_7___d67) &&
	     NOT_rg_p_a_BITS_128_TO_123_0_ULT_7_2___d53 &&
	     rg_p_a[128:123] <= 6'd14 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_56___d65 = rg_p_a[128:123] < 6'd56 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_57_0_OR_NOT_rg_p__ETC___d58 =
	     (rg_p_a_BITS_128_TO_123_0_ULT_57___d40 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_60___d41) &&
	     (rg_p_a_BITS_128_TO_123_0_ULT_3___d48 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_6___d49) &&
	     NOT_rg_p_a_BITS_128_TO_123_0_ULT_7_2___d53 &&
	     rg_p_a[128:123] <= 6'd13 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_57___d40 = rg_p_a[128:123] < 6'd57 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_58_5_OR_NOT_rg_p__ETC___d33 =
	     (rg_p_a_BITS_128_TO_123_0_ULT_58___d15 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_61___d16) &&
	     (rg_p_a_BITS_128_TO_123_0_ULT_2___d23 ||
	      !rg_p_a_BITS_128_TO_123_0_ULE_5___d24) &&
	     rg_p_a[128:123] >= 6'd6 &&
	     rg_p_a_BITS_128_TO_123_0_ULE_11___d29 ;
  assign rg_p_a_BITS_128_TO_123_0_ULT_58___d15 = rg_p_a[128:123] < 6'd58 ;
  assign rg_q_BITS_31_TO_0__q4 = rg_q[31:0] ;
  assign rg_rem_BITS_31_TO_0__q3 = rg_rem[31:0] ;
  assign temp__h2462 = { 1'd0, rg_divisor } ;
  assign v009_BITS_31_TO_0__q6 = v__h9009[31:0] ;
  assign v__h9009 = x__h9001 ? v__h9020 : 64'd0 ;
  assign x___1__h2540 = x__h2460 - 64'd1 ;
  assign x__h2460 = rg_q_pos - rg_q_neg ;
  assign x__h9001 = rg_cntrl == 3'd6 ;
  assign x__h9330 = rg_div_len ? lv_out__h9332 : v__h9009 ;
  assign y___1__h2197 = { rg_divisor, 65'd0 } ;
  assign y__h733 = { temp__h2462, 64'd0 } ;
  assign y__h8787 =
	     (ma_start_opcode == 4'b1110) ?
	       64'hFFFFFFFF80000000 :
	       64'h8000000000000000 ;
  always@(rg_divisor or
	  rg_divisor_BITS_63_TO_60_EQ_0b1111_47_AND_NOT__ETC___d194 or
	  _theResult___snd__h943 or
	  _theResult___snd__h1117 or
	  _theResult___snd__h1269 or
	  _theResult___snd__h1421 or
	  _theResult___snd__h1573 or
	  _theResult___snd__h1725 or _theResult___snd__h1877)
  begin
    case (rg_divisor[63:60])
      4'b1000:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 =
	      _theResult___snd__h943;
      4'b1001:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 =
	      _theResult___snd__h1117;
      4'b1010:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 =
	      _theResult___snd__h1269;
      4'b1011:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 =
	      _theResult___snd__h1421;
      4'b1100:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 =
	      _theResult___snd__h1573;
      4'b1101:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 =
	      _theResult___snd__h1725;
      4'b1110:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 =
	      _theResult___snd__h1877;
      default: IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d201 =
		   rg_divisor_BITS_63_TO_60_EQ_0b1111_47_AND_NOT__ETC___d194;
    endcase
  end
  always@(rg_divisor or
	  rg_p_a_BITS_128_TO_123_0_ULT_42___d148 or
	  rg_p_a_BITS_128_TO_123_0_ULE_51___d150 or
	  rg_p_a_BITS_128_TO_123_0_ULT_52___d11 or
	  rg_p_a_BITS_128_TO_123_0_ULE_60___d41 or
	  rg_p_a_BITS_128_TO_123_0_ULT_3___d48 or
	  rg_p_a_BITS_128_TO_123_0_ULE_11___d29 or
	  rg_p_a_BITS_128_TO_123_0_ULE_57___d13 or
	  rg_p_a_BITS_128_TO_123_0_ULT_58___d15 or
	  rg_p_a_BITS_128_TO_123_0_ULE_61___d16 or
	  rg_p_a_BITS_128_TO_123_0_ULT_2___d23 or
	  rg_p_a_BITS_128_TO_123_0_ULE_5___d24 or
	  rg_p_a_BITS_128_TO_123_0_ULT_50___d36 or
	  rg_p_a_BITS_128_TO_123_0_ULE_56___d38 or
	  rg_p_a_BITS_128_TO_123_0_ULT_57___d40 or
	  rg_p_a_BITS_128_TO_123_0_ULE_6___d49 or
	  rg_p_a_BITS_128_TO_123_0_ULT_49___d61 or
	  rg_p_a_BITS_128_TO_123_0_ULE_55___d63 or
	  rg_p_a_BITS_128_TO_123_0_ULT_56___d65 or
	  rg_p_a_BITS_128_TO_123_0_ULE_7___d67 or
	  rg_p_a_BITS_128_TO_123_0_ULT_48___d77 or
	  rg_p_a_BITS_128_TO_123_0_ULE_54___d79 or
	  rg_p_a_BITS_128_TO_123_0_ULT_55___d81 or
	  rg_p_a_BITS_128_TO_123_0_ULE_8___d83 or
	  rg_p_a_BITS_128_TO_123_0_ULT_46___d95 or
	  rg_p_a_BITS_128_TO_123_0_ULE_53___d97 or
	  NOT_rg_p_a_BITS_128_TO_123_0_ULT_54_9_85_AND_r_ETC___d239 or
	  rg_p_a_BITS_128_TO_123_0_ULT_45___d120 or
	  rg_p_a_BITS_128_TO_123_0_ULT_44___d130 or
	  rg_p_a_BITS_128_TO_123_0_ULE_52___d132 or
	  rg_p_a_BITS_128_TO_123_0_ULT_53___d134 or
	  rg_p_a_BITS_128_TO_123_0_ULE_59___d100 or
	  rg_p_a_BITS_128_TO_123_0_ULT_4___d107 or
	  rg_p_a_BITS_128_TO_123_0_ULE_10___d136)
  begin
    case (rg_divisor[63:60])
      4'b1000:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 =
	      (rg_p_a_BITS_128_TO_123_0_ULT_52___d11 ||
	       !rg_p_a_BITS_128_TO_123_0_ULE_57___d13) &&
	      (!rg_p_a_BITS_128_TO_123_0_ULT_58___d15 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_61___d16 ||
	       !rg_p_a_BITS_128_TO_123_0_ULT_2___d23 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_5___d24);
      4'b1001:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 =
	      (rg_p_a_BITS_128_TO_123_0_ULT_50___d36 ||
	       !rg_p_a_BITS_128_TO_123_0_ULE_56___d38) &&
	      (!rg_p_a_BITS_128_TO_123_0_ULT_57___d40 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_60___d41 ||
	       !rg_p_a_BITS_128_TO_123_0_ULT_3___d48 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_6___d49);
      4'b1010:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 =
	      (rg_p_a_BITS_128_TO_123_0_ULT_49___d61 ||
	       !rg_p_a_BITS_128_TO_123_0_ULE_55___d63) &&
	      (!rg_p_a_BITS_128_TO_123_0_ULT_56___d65 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_60___d41 ||
	       !rg_p_a_BITS_128_TO_123_0_ULT_3___d48 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_7___d67);
      4'b1011:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 =
	      (rg_p_a_BITS_128_TO_123_0_ULT_48___d77 ||
	       !rg_p_a_BITS_128_TO_123_0_ULE_54___d79) &&
	      (!rg_p_a_BITS_128_TO_123_0_ULT_55___d81 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_60___d41 ||
	       !rg_p_a_BITS_128_TO_123_0_ULT_3___d48 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_8___d83);
      4'b1100:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 =
	      (rg_p_a_BITS_128_TO_123_0_ULT_46___d95 ||
	       !rg_p_a_BITS_128_TO_123_0_ULE_53___d97) &&
	      NOT_rg_p_a_BITS_128_TO_123_0_ULT_54_9_85_AND_r_ETC___d239;
      4'b1101:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 =
	      (rg_p_a_BITS_128_TO_123_0_ULT_45___d120 ||
	       !rg_p_a_BITS_128_TO_123_0_ULE_53___d97) &&
	      NOT_rg_p_a_BITS_128_TO_123_0_ULT_54_9_85_AND_r_ETC___d239;
      4'b1110:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 =
	      (rg_p_a_BITS_128_TO_123_0_ULT_44___d130 ||
	       !rg_p_a_BITS_128_TO_123_0_ULE_52___d132) &&
	      (!rg_p_a_BITS_128_TO_123_0_ULT_53___d134 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_59___d100 ||
	       !rg_p_a_BITS_128_TO_123_0_ULT_4___d107 &&
	       rg_p_a_BITS_128_TO_123_0_ULE_10___d136);
      default: IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_rg__ETC___d262 =
		   rg_divisor[63:60] == 4'b1111 &&
		   (rg_p_a_BITS_128_TO_123_0_ULT_42___d148 ||
		    !rg_p_a_BITS_128_TO_123_0_ULE_51___d150) &&
		   (!rg_p_a_BITS_128_TO_123_0_ULT_52___d11 &&
		    rg_p_a_BITS_128_TO_123_0_ULE_60___d41 ||
		    !rg_p_a_BITS_128_TO_123_0_ULT_3___d48 &&
		    rg_p_a_BITS_128_TO_123_0_ULE_11___d29);
    endcase
  end
  always@(rg_divisor or
	  rg_divisor_BITS_63_TO_60_EQ_0b1111_47_AND_NOT__ETC___d165 or
	  rg_p_a_BITS_128_TO_123_0_ULT_52___d11 or
	  rg_p_a_BITS_128_TO_123_0_ULE_57___d13 or
	  rg_p_a_BITS_128_TO_123_0_ULT_58_5_OR_NOT_rg_p__ETC___d33 or
	  rg_p_a_BITS_128_TO_123_0_ULT_50___d36 or
	  rg_p_a_BITS_128_TO_123_0_ULE_56___d38 or
	  rg_p_a_BITS_128_TO_123_0_ULT_57_0_OR_NOT_rg_p__ETC___d58 or
	  rg_p_a_BITS_128_TO_123_0_ULT_49___d61 or
	  rg_p_a_BITS_128_TO_123_0_ULE_55___d63 or
	  rg_p_a_BITS_128_TO_123_0_ULT_56_5_OR_NOT_rg_p__ETC___d74 or
	  NOT_rg_p_a_BITS_128_TO_123_0_ULT_48_7_8_AND_rg_ETC___d93 or
	  rg_p_a_BITS_128_TO_123_0_ULT_46___d95 or
	  rg_p_a_BITS_128_TO_123_0_ULE_53___d97 or
	  rg_p_a_BITS_128_TO_123_0_ULT_54_9_OR_NOT_rg_p__ETC___d117 or
	  rg_p_a_BITS_128_TO_123_0_ULT_45___d120 or
	  rg_p_a_BITS_128_TO_123_0_ULT_54_9_OR_NOT_rg_p__ETC___d127 or
	  rg_p_a_BITS_128_TO_123_0_ULT_44___d130 or
	  rg_p_a_BITS_128_TO_123_0_ULE_52___d132 or
	  rg_p_a_BITS_128_TO_123_0_ULT_53_34_OR_NOT_rg_p_ETC___d145)
  begin
    case (rg_divisor[63:60])
      4'b1000:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 =
	      !rg_p_a_BITS_128_TO_123_0_ULT_52___d11 &&
	      rg_p_a_BITS_128_TO_123_0_ULE_57___d13 ||
	      rg_p_a_BITS_128_TO_123_0_ULT_58_5_OR_NOT_rg_p__ETC___d33;
      4'b1001:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 =
	      !rg_p_a_BITS_128_TO_123_0_ULT_50___d36 &&
	      rg_p_a_BITS_128_TO_123_0_ULE_56___d38 ||
	      rg_p_a_BITS_128_TO_123_0_ULT_57_0_OR_NOT_rg_p__ETC___d58;
      4'b1010:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 =
	      !rg_p_a_BITS_128_TO_123_0_ULT_49___d61 &&
	      rg_p_a_BITS_128_TO_123_0_ULE_55___d63 ||
	      rg_p_a_BITS_128_TO_123_0_ULT_56_5_OR_NOT_rg_p__ETC___d74;
      4'b1011:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 =
	      NOT_rg_p_a_BITS_128_TO_123_0_ULT_48_7_8_AND_rg_ETC___d93;
      4'b1100:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 =
	      !rg_p_a_BITS_128_TO_123_0_ULT_46___d95 &&
	      rg_p_a_BITS_128_TO_123_0_ULE_53___d97 ||
	      rg_p_a_BITS_128_TO_123_0_ULT_54_9_OR_NOT_rg_p__ETC___d117;
      4'b1101:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 =
	      !rg_p_a_BITS_128_TO_123_0_ULT_45___d120 &&
	      rg_p_a_BITS_128_TO_123_0_ULE_53___d97 ||
	      rg_p_a_BITS_128_TO_123_0_ULT_54_9_OR_NOT_rg_p__ETC___d127;
      4'b1110:
	  IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 =
	      !rg_p_a_BITS_128_TO_123_0_ULT_44___d130 &&
	      rg_p_a_BITS_128_TO_123_0_ULE_52___d132 ||
	      rg_p_a_BITS_128_TO_123_0_ULT_53_34_OR_NOT_rg_p_ETC___d145;
      default: IF_rg_divisor_BITS_63_TO_60_EQ_0b1000_THEN_NOT_ETC___d172 =
		   rg_divisor_BITS_63_TO_60_EQ_0b1111_47_AND_NOT__ETC___d165;
    endcase
  end
  always@(rg_special_case or
	  rg_div_rem or
	  IF_rg_rem_sign_99_THEN_INV_rg_rem_97_BITS_63_T_ETC___d706 or
	  IF_rg_div_sign_07_THEN_INV_rg_q_08_09_PLUS_0b1_ETC___d714 or
	  _theResult___fst__h9073 or
	  IF_rg_div_rem_88_THEN_0_ELSE_rg_dividend1_89___d695 or
	  _theResult___fst__h9170)
  begin
    case (rg_special_case)
      3'd1: v__h9020 = _theResult___fst__h9073;
      3'd2, 3'd4:
	  v__h9020 = IF_rg_div_rem_88_THEN_0_ELSE_rg_dividend1_89___d695;
      3'd3: v__h9020 = _theResult___fst__h9170;
      default: v__h9020 =
		   rg_div_rem ?
		     IF_rg_rem_sign_99_THEN_INV_rg_rem_97_BITS_63_T_ETC___d706 :
		     IF_rg_div_sign_07_THEN_INV_rg_q_08_09_PLUS_0b1_ETC___d714;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_cntrl <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_div_len <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_div_rem <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_div_sign <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_div_type <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dividend <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_dividend1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_divisor <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_p_a <= `BSV_ASSIGNMENT_DELAY 129'd0;
	rg_q <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_q_neg <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_q_pos <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_rem <= `BSV_ASSIGNMENT_DELAY 65'd0;
	rg_rem_sign <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_shift_divisor <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_special_case <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 7'd0;
      end
    else
      begin
        if (rg_cntrl$EN) rg_cntrl <= `BSV_ASSIGNMENT_DELAY rg_cntrl$D_IN;
	if (rg_div_len$EN)
	  rg_div_len <= `BSV_ASSIGNMENT_DELAY rg_div_len$D_IN;
	if (rg_div_rem$EN)
	  rg_div_rem <= `BSV_ASSIGNMENT_DELAY rg_div_rem$D_IN;
	if (rg_div_sign$EN)
	  rg_div_sign <= `BSV_ASSIGNMENT_DELAY rg_div_sign$D_IN;
	if (rg_div_type$EN)
	  rg_div_type <= `BSV_ASSIGNMENT_DELAY rg_div_type$D_IN;
	if (rg_dividend$EN)
	  rg_dividend <= `BSV_ASSIGNMENT_DELAY rg_dividend$D_IN;
	if (rg_dividend1$EN)
	  rg_dividend1 <= `BSV_ASSIGNMENT_DELAY rg_dividend1$D_IN;
	if (rg_divisor$EN)
	  rg_divisor <= `BSV_ASSIGNMENT_DELAY rg_divisor$D_IN;
	if (rg_p_a$EN) rg_p_a <= `BSV_ASSIGNMENT_DELAY rg_p_a$D_IN;
	if (rg_q$EN) rg_q <= `BSV_ASSIGNMENT_DELAY rg_q$D_IN;
	if (rg_q_neg$EN) rg_q_neg <= `BSV_ASSIGNMENT_DELAY rg_q_neg$D_IN;
	if (rg_q_pos$EN) rg_q_pos <= `BSV_ASSIGNMENT_DELAY rg_q_pos$D_IN;
	if (rg_rem$EN) rg_rem <= `BSV_ASSIGNMENT_DELAY rg_rem$D_IN;
	if (rg_rem_sign$EN)
	  rg_rem_sign <= `BSV_ASSIGNMENT_DELAY rg_rem_sign$D_IN;
	if (rg_shift_divisor$EN)
	  rg_shift_divisor <= `BSV_ASSIGNMENT_DELAY rg_shift_divisor$D_IN;
	if (rg_special_case$EN)
	  rg_special_case <= `BSV_ASSIGNMENT_DELAY rg_special_case$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_cntrl = 3'h2;
    rg_div_len = 1'h0;
    rg_div_rem = 1'h0;
    rg_div_sign = 1'h0;
    rg_div_type = 1'h0;
    rg_dividend = 64'hAAAAAAAAAAAAAAAA;
    rg_dividend1 = 64'hAAAAAAAAAAAAAAAA;
    rg_divisor = 64'hAAAAAAAAAAAAAAAA;
    rg_p_a = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_q = 64'hAAAAAAAAAAAAAAAA;
    rg_q_neg = 64'hAAAAAAAAAAAAAAAA;
    rg_q_pos = 64'hAAAAAAAAAAAAAAAA;
    rg_rem = 65'h0AAAAAAAAAAAAAAAA;
    rg_rem_sign = 1'h0;
    rg_shift_divisor = 6'h2A;
    rg_special_case = 3'h2;
    rg_state = 7'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mk_srt_radix4_divider

